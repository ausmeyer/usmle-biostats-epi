source('~/Desktop/random_sample.R')
source('~/Desktop/random_sample.R')
source('~/Desktop/random_sample.R')
source('~/Desktop/random_sample.R')
AIC(initial.fit.1)
AIC(initial.fit.3)
AIC(initial.fit.4)
BIC(initial.fit.1)
BIC(initial.fit.3)
test <- df
test$Bush.99[test$Bush.99 != '-'] <- 'A'
test$Bush.99
fit <- lm(test$FEL.dN.dS ~ test$Bush.99)
summary(fit)
AIC(fit)
AIC(initial.fit.2)
initial.fit.test <- lm(df$FEL.dN.dS ~ df$RSA.Multimer + I(1/df$distance.to.224.all) + test$Bush.99)
AIC(initial.fit.3)
AIC(initial.fit.test)
BIC(initial.fit.3)
BIC(initial.fit.test)
summary(initial.fit.1)
plot(initial.fit.1)
initial.fit.1$residuals
plot(initial.fit.1$residuals, initial.fit.3$residuals)
plot(initial.fit.1$residuals, initial.fit.3$residuals, ylim=c(-2, 2), xlim=c(-2,2))
abline(0,1)
plot(initial.fit.1$residuals^2, initial.fit.3$residuals^2, ylim=c(-2, 2), xlim=c(-2,2))
abline(0,1)
p <- ggplot(data.frame(x=initial.fit.1$residuals^2, y=initial.fit.3$residuals^2, cats=df$Bush.99), aes(x=x, y=y, col=cats)) + geom_point()
show(p)
p <- ggplot(data.frame(x=initial.fit.1$residuals^2, y=initial.fit.3$residuals^2, cats=df$Bush.99), aes(x=x, y=y, col=cats)) + geom_point(size=4)
show(p)
p <- ggplot(data.frame(x=initial.fit.1$residuals^2, y=initial.fit.3$residuals^2, cats=df$Bush.99), aes(x=x, y=y, col=cats)) + geom_point(size=4) + geom_abline(0,1)
p <- ggplot(data.frame(x=initial.fit.1$residuals^2, y=initial.fit.3$residuals^2, cats=df$Bush.99), aes(x=x, y=y, col=cats)) + geom_point(size=4) + geom_abline(intercept=0, slope=1)
p <- ggplot(data.frame(x=initial.fit.1$residuals^2, y=initial.fit.3$residuals^2, cats=df$Bush.99), aes(x=x, y=y, col=cats)) + geom_point(size=4) + geom_abline(0,1)
p <- ggplot(data.frame(x=initial.fit.1$residuals^2, y=initial.fit.3$residuals^2, cats=df$Bush.99), aes(x=x, y=y, col=cats)) + geom_point(size=4) + geom_abline(intercept=0, slope=1)
show(p)
getwd()
as.character(c
)
as.character(c
a <- as.character(c
substring(a, seq(1,nchar(x),1))
substring(a, seq(1,nchar(a),1))
substring(a, seq(1,nchar(a),1), seq(2,nchar(a),1))
substring(a, seq(1,nchar(a)-1,1), seq(2,nchar(a),1))
substring(a, 1
)
substring(a, 1, 2)
substring(a, 1, 1)
substring(a, seq(1,nchar(a),1), seq(1,nchar(a),1))
b<-substring(a, seq(1,nchar(a),1), seq(1,nchar(a),1))
a==paste(b, sep='')
paste(b, sep='')
paste(b, sep='', collapse = T)
paste(b, sep='', collapse = "")
a==paste(b, sep='', collapse='')
which(b!=1)
which(b!=0)
length(which(b!=0))
a <- c
b<-substring(a, seq(1,nchar(a),1), seq(1,nchar(a),1))
a==paste(b, sep='', collapse='')
which(b!=0)
c('00000000000000000000000000000000000000000000')
nchar(c('00000000000000000000000000000000000000000000'))
nchar(a)
nchar('00000000000000000000000000000000000000000000')
nchar('00000000000000000000000000000000000000000000')
nchar('00000000000000000000000000000000000000000000')
nchar('00000000000000000000000000000000000000000000')
nchar(c('00000000000000000000000000000000000000000000'))
require(boot)
?boot.ci
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
city.boot <- boot(city, ratio, R = 999, stype = "w", sim = "ordinary")
boot.ci(city.boot, conf = c(0.99),
type = c("BCa"))
boot.ci(city.boot, conf = c(0.99),
type = c("bca"))
getwd()
dat <- read.table('ISA_data.csv', sep=';', header=T)
View(dat)
dat[2]
dat[,1]
dat <- read.table('ISA_data.csv', sep=';', header=T, stringsAsFactors = F)
dat[,1]
dat[1,]
install.packages("adabag")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(adabag)
r.skew <- skew.rnorm(10000, mean = 10, skewness = -0.5)
library(espresso)
library(adabag)
r.skew <- skew.rnorm(10000, mean = 10, skewness = -0.5)
install.packages("adabag")
install.packages("adabag")
library(slidify)
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
?publish
publish
publish_deck
publish_github
library(slidify)
publish(user='ausmeyer', repo='intro-biostats-epi')
require(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio')
require(devtools)
install_github(c('slidify', 'slidifyLibraries'), 'ramnathv', ref = 'dev')
install_github('rCharts', 'ramnathv')
install_github('shiny', 'rstudio/shiny')
install_github('ramanathv/rCharts')
install.packages('nvd3')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
require(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pkgs, "ramnathv", ref = "dev")
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pkgs, "ramnathv", ref = "dev")
source('~/.active-rstudio-document', echo=TRUE)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages(c("plyr", "ggplot2","rgeos", "maptools")))
install.packages(c("plyr", "ggplot2","rgeos", "maptools"))
setwd('~/Websites/intro-biostats-epi/')
require(slidify)
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
publish(user='ausmeyer', repo='intro-biostats-epi')
library(rsconnect)
deployApp()
setwd('~/Websites/predictive_value_shiny/')
deployApp()
setwd('~/Websites/intro-biostats-epi/')
require(slidify)
publish(user='ausmeyer', repo='intro-biostats-epi')
setwd('~/Websites/predictive_value_shiny/')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
prevalence.point <- 0.7
population.size <- 1000
with.disease <- prevalence.point * population.size
without.disease <- population.size - with.disease
prevalence.point <- 0.1
population.size <- 1000
with.disease <- prevalence.point * population.size
without.disease <- population.size - with.disease
sensitivity <- 0.9
specificity <- 0.8
fn.sensitivity <- function(x) {
tmp.with.disease <- rnorm(with.disease, mean = 5, sd = x)
TP <- tmp.with.disease * sensitivity          # people testing correctly positive
sensitivity - TP / tmp.with.disease
}
fn.specificity <- function(x) {
tmp.without.disease <- rnorm(without.disease, mean = 5, sd = x)
TN <- tmp.without.disease * specificity       # people testing correctly negative
specificity - TN / tmp.without.disease
}
optim(par = 1, fn.sensitivity)
optimize(par = 1, fn.sensitivity)
optim(par = 1, fn.sensitivity, method = "Brent",)
optim(par = 1, fn.sensitivity, method = "Brent")
optim(par = 1, fn.sensitivity, method = "Brent", lower = 0.1, upper = 10)
optim(par = 1, fn.sensitivity, method = "Brent", lower = 1, upper = 3)
optimize(fn.sensitivity, c(1,10), lower = 1, upper=10)
fn.sensitivity <- function(x) {
tmp.with.disease <- rnorm(with.disease, mean = 5, sd = x)
TP <- tmp.with.disease * sensitivity          # people testing correctly positive
sensitivity - TP / tmp.with.disease
}
fn.specificity <- function(x) {
tmp.without.disease <- rnorm(without.disease, mean = 15, sd = x)
TN <- tmp.without.disease * specificity       # people testing correctly negative
specificity - TN / tmp.without.disease
}
fn.sensitivity <- function(x) {
tmp.with.disease <- rnorm(with.disease, mean = 5, sd = x)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
sensitivity - TP / with.disease
}
fn.specificity <- function(x) {
tmp.without.disease <- rnorm(without.disease, mean = 15, sd = x)
TN <- sum(tmp.with.disease < 10)       # people testing correctly negative
specificity - TN / without.disease
}
optimize(fn.sensitivity, c(1,10), lower = 1, upper=10)
optim(par = 1, fn.sensitivity)
optim(par = 1, fn.sensitivity, method = "Brent")
optim(par = 1, fn.sensitivity, method = "Brent", lower = 0.1, upper = 15)
optimize(fn.sensitivity, c(1,10), lower = 1, upper=15)
optimize(fn.sensitivity, c(1,10), lower = 1, upper=100)
optimize(fn.sensitivity, c(1,10), lower = 1, upper=10)
optimize(fn.sensitivity, c(1,10), lower = 0.1, upper=5)
optimize(fn.sensitivity, c(0, 5), lower = 0.1, upper=5)
optimize(fn.sensitivity, c(0, 5), lower = 0.1, upper=10)
optimize(fn.sensitivity, par = 1, lower = 0.1, upper = 5)
optimize(fn.sensitivity, c(1), lower = 0.1, upper = 5)
optimize(fn.sensitivity, c(1), lower = 0.1, upper = 6)
optimize(fn.sensitivity, c(1), lower = 0.1, upper = 7)
optimize(fn.sensitivity, c(1), lower = 0.1, upper = 4)
optimize(fn.sensitivity, c(1), lower = 0.1, upper = 5)
shiny::runApp()
shiny::runApp()
prevalence.point <- 0.1
population.size <- 1000
with.disease <- prevalence.point * population.size
without.disease <- population.size - with.disease
sensitivity <- 0.9
specificity <- 0.8
fn.sensitivity <- function(x) {
tmp.with.disease <- rnorm(with.disease, mean = 5, sd = x)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
sensitivity - TP / with.disease
}
fn.specificity <- function(x) {
tmp.without.disease <- rnorm(without.disease, mean = 15, sd = x)
TN <- sum(tmp.without.disease < 10)       # people testing correctly negative
specificity - TN / without.disease
}
sd.sensitivity <- optimize(fn.sensitivity, c(1), lower = 0.1, upper = 5)
sd.specificity <- optimize(fn.specificity, c(1), lower = 0.1, upper = 5)
sd.sensitivity
sd.specificity
norm1 <- rnorm(without.disease, mean = 5, sd = sd.sensitivity)
norm2 <- rnorm(with.disease, mean = 15, sd = sd.specificity)
norm1 <- rnorm(without.disease, mean = 5, sd = sd.sensitivity$minimum)
norm2 <- rnorm(with.disease, mean = 15, sd = sd.specificity$minimum)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
prevalence.point <- 0.1
population.size <- 1000
with.disease <- prevalence.point * population.size
without.disease <- population.size - with.disease
sensitivity <- 0.9
specificity <- 0.9
fn.sensitivity <- function(x, ) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = y)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
sensitivity - TP / with.disease
}
fn.specificity <- function(x, y) {
tmp.without.disease <- rnorm(without.disease, mean = x, sd = y)
TN <- sum(tmp.without.disease < 10)       # people testing correctly negative
specificity - TN / without.disease
}
fn.sensitivity <- function(x, ) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = y)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
sensitivity - TP / with.disease
}
fn.sensitivity <- function(x, ) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = y)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
sensitivity - TP / with.disease
}
fn.sensitivity <- function(x, y) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = y)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
sensitivity - TP / with.disease
}
fn.specificity <- function(x, y) {
tmp.without.disease <- rnorm(without.disease, mean = x, sd = y)
TN <- sum(tmp.without.disease < 10)       # people testing correctly negative
specificity - TN / without.disease
}
sd.sensitivity <- optim(par = c(1, 1), fn.sensitivity)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fn.sensitivity <- function(x, y) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = 2)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
sensitivity - TP / with.disease
}
fn.specificity <- function(x, y) {
tmp.without.disease <- rnorm(without.disease, mean = x, sd = 2)
TN <- sum(tmp.without.disease < 10)       # people testing correctly negative
specificity - TN / without.disease
}
mean.sensitivity <- optim(par = c(1, 20), fn.sensitivity, y = 2)
mean.specificity <- optim(par = c(1,20), fn.specificity, y = 2)
mean.sensitivity
mean.specificity
mean.sensitivity <- optim(par = c(1, 20), fn.sensitivity, y = seq(0.1, 5, by = 0.5))
mean.sensitivity
mean.sensitivity$value
without.disease.distribution <- rnorm(without.disease, mean = mean.sensitivity$value, sd = 2, method = "L-BFGS-B")
mean.sensitivity <- optim(par = c(1, 20), fn.sensitivity, y = 2, method = "L-BFGS-B")
mean.sensitivity
mean.sensitivity <- optim(par = c(0.1, 100), fn.sensitivity, y = 2, method = "L-BFGS-B")
mean.sensitivity
mean.sensitivity <- optim(par = c(0.1, 100), fn.sensitivity, y = 2, method = "SANN")
mean.seni
mean.sensitivity
mean.sensitivity <- optim(par = c(0.1, 100), fn.sensitivity, y = 2, method = "SANN")
mean.specificity <- optim(par = c(1, 20), fn.specificity, y = 2, method = "SANN")
mean.specificity
shiny::runApp()
shiny::runApp()
mean.sensitivity <- optim(par = c(1, 20), fn.sensitivity, y = 2, method = "SANN")
mean.specificity <- optim(par = c(1, 20), fn.specificity, y = 2, method = "SANN")
without.disease.distribution <- rnorm(without.disease, mean = mean.sensitivity$par[1], sd = 2)
with.disease.distribution <- rnorm(with.disease, mean = mean.specificity$par[1], sd = 2)
TP <- sum(with.disease.distribution >= 10)
calculated.sensitivity <- TP / with.disease
TN <- sum(without.disease.distribution < 10)
calculated.specificity <- TN / without.disease
calculated.sensitivity
with.disease.distribution <- rnorm(with.disease, mean = mean.sensitivity$par[1], sd = 2)
without.disease.distribution <- rnorm(without.disease, mean = mean.specificity$par[1], sd = 2)
TP <- sum(with.disease.distribution >= 10)
calculated.sensitivity <- TP / with.disease
TN <- sum(without.disease.distribution < 10)
calculated.specificity <- TN / without.disease
calculated.sensitivity
calculated.specificity
shiny::runApp()
shiny::runApp()
shiny::runApp()
prevalence.point <- 0.1
population.size <- 1000
with.disease <- prevalence.point * population.size
without.disease <- population.size - with.disease
sensitivity <- 0.5
specificity <- 0.5
fn.sensitivity <- function(x, y) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = 2)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
return(sensitivity - TP / with.disease)
}
mean.sensitivity <- optim(par = c(1, 20), fn.sensitivity, y = 2, trace = TRUE)
mean.sensitivity <- optim(par = c(1, 20), fn.sensitivity, y = 2, trace = TRUE, method = 'SANN')
optim(par = c(1, 20), fn.sensitivity, y = 2, control=list(trace=TRUE))
optim(par = c(1, 20), fn.sensitivity, y = 2, control=list(trace=TRUE), method = "SANN")
optimx(par = 1, fn.sensitivity, control=list(trace=TRUE), method = "SANN")
install.packages('optimx')
library(optimx)
optimx(par = 1, fn.sensitivity, control=list(trace=TRUE), method = "SANN")
optimx(par = 1, fn.sensitivity, control=list(trace=TRUE))
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), method = "SANN")
optim(par = 1, fn.specificity, y = 2)
fn.sensitivity <- function(x, y) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = 2)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
return(sensitivity - TP / with.disease)
}
fn.specificity <- function(x, y) {
tmp.without.disease <- rnorm(without.disease, mean = x, sd = 2)
TN <- sum(tmp.without.disease < 10)       # people testing correctly negative
return(specificity - TN / without.disease)
}
optim(par = 1, fn.specificity, y = 2)
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), method = "Brent")
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.sensitivity, control=list(trace=TRUE), lower = 1, upper = 20, method = "Brent")
optim(par = 10, fn.sensitivity, lower = 1, upper = 20, method = "Brent")
optim(par = 10, fn.sensitivity, lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.specificity, lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.specificity, lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.specificity, lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.specificity, lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.specificity, lower = 1, upper = 20, method = "Brent")
optim(par = 1, fn.specificity, lower = 1, upper = 20, method = "Brent", maxit = 20000)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
optim(par = 1, fn.specificity, lower = 1, upper = 20, method = "Brent", maxit = 20000)optim(par = 10, fn.sensitivity, lower = 0, upper = 20, method = "Brent")
optim(par = 10, fn.sensitivity, lower = 0, upper = 20, method = "Brent")
fn.sensitivity <- function(x) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = 2)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
return(sensitivity - TP / with.disease)
}
fn.specificity <- function(x) {
tmp.without.disease <- rnorm(without.disease, mean = x, sd = 2)
TN <- sum(tmp.without.disease < 10)       # people testing correctly negative
return(specificity - TN / without.disease)
}
optim(par = 10, fn.sensitivity, lower = 0, upper = 20, method = "Brent")
fn.sensitivity(10)
fn.sensitivity(15)
fn.sensitivity <- function(x) {
tmp.with.disease <- rnorm(with.disease, mean = x, sd = 2)
TP <- sum(tmp.with.disease >= 10)         # people testing correctly positive
return((sensitivity - TP / with.disease)^2)
}
fn.specificity <- function(x) {
tmp.without.disease <- rnorm(without.disease, mean = x, sd = 2)
TN <- sum(tmp.without.disease < 10)       # people testing correctly negative
return((specificity - TN / without.disease)^2)
}
optim(par = 10, fn.sensitivity, lower = 0, upper = 20, method = "Brent")
optim(par = 1, fn.specificity, lower = 0, upper = 20, method = "Brent")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd('~/Websites/predictive_value_shiny/')
require(shiny)
deployApp()
library(rsconnect)
deployApp()
setwd('~/Websites/intro-biostats-epi/')
require(slidify)
publish(user='ausmeyer', repo='intro-biostats-epi')
